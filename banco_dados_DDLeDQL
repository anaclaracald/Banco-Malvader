DROP DATABASE IF EXISTS banco_malvader;
CREATE DATABASE banco_malvader;
USE banco_malvader;

-- Tabela usuario
CREATE TABLE usuario (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(11) UNIQUE NOT NULL,
    data_nascimento DATE NOT NULL,
    telefone VARCHAR(15) NOT NULL,
    tipo_usuario ENUM('FUNCIONARIO', 'CLIENTE') NOT NULL,
    senha_hash VARCHAR(32) NOT NULL,
    otp_ativo VARCHAR(6),
    otp_expiracao DATETIME
);

-- Tabela funcionario
CREATE TABLE funcionario (
    id_funcionario INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT,
    codigo_funcionario VARCHAR(20) UNIQUE NOT NULL,
    cargo ENUM('ESTAGIARIO', 'ATENDENTE', 'GERENTE') NOT NULL,
    id_supervisor INT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (id_supervisor) REFERENCES funcionario(id_funcionario)
);

-- Tabela cliente
CREATE TABLE cliente (
    id_cliente INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT,
    score_credito DECIMAL(5,2) DEFAULT 0,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Tabela endereco
CREATE TABLE endereco (
    id_endereco INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    cep VARCHAR(10) NOT NULL,
    local VARCHAR(100) NOT NULL,
    numero_casa INT NOT NULL,
    bairro VARCHAR(50) NOT NULL,
    cidade VARCHAR(50) NOT NULL,
    estado CHAR(2) NOT NULL,
    complemento VARCHAR(50),
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Índice CEP
CREATE INDEX idx_cep ON endereco(cep);

-- Tabela agencia
CREATE TABLE agencia (
    id_agencia INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    codigo_agencia VARCHAR(10) UNIQUE NOT NULL,
    endereco_id INT,
    FOREIGN KEY (endereco_id) REFERENCES endereco(id_endereco)
);

-- Tabela conta
CREATE TABLE conta (
    id_conta INT AUTO_INCREMENT PRIMARY KEY,
    numero_conta VARCHAR(20) UNIQUE NOT NULL,
    id_agencia INT,
    saldo DECIMAL(15,2) NOT NULL DEFAULT 0,
    tipo_conta ENUM('POUPANCA', 'CORRENTE', 'INVESTIMENTO') NOT NULL,
    id_cliente INT,
    data_abertura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status ENUM('ATIVA', 'ENCERRADA', 'BLOQUEADA') NOT NULL DEFAULT 'ATIVA',
    FOREIGN KEY (id_agencia) REFERENCES agencia(id_agencia),
    FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
);

-- Índice do número da conta
CREATE INDEX idx_numero_conta ON conta(numero_conta);

-- Tabela conta_poupanca
CREATE TABLE conta_poupanca (
    id_conta_poupanca INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT UNIQUE,
    taxa_rendimento DECIMAL(5,2) NOT NULL,
    ultimo_rendimento DATETIME,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta)
);

-- Tabela conta_corrente
CREATE TABLE conta_corrente (
    id_conta_corrente INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT UNIQUE,
    limite DECIMAL(15,2) NOT NULL DEFAULT 0,
    data_vencimento DATE NOT NULL,
    taxa_manutencao DECIMAL(5,2) NOT NULL DEFAULT 0,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta)
);

-- Tabela conta_investimento
CREATE TABLE conta_investimento (
    id_conta_investimento INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT UNIQUE,
    perfil_risco ENUM('BAIXO', 'MEDIO', 'ALTO') NOT NULL,
    valor_minimo DECIMAL(15,2) NOT NULL,
    taxa_rendimento_base DECIMAL(5,2) NOT NULL,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta)
);

-- Tabela transacao
CREATE TABLE transacao (
    id_transacao INT AUTO_INCREMENT PRIMARY KEY,
    id_conta_origem INT,
    id_conta_destino INT,
    tipo_transacao ENUM('DEPOSITO', 'SAQUE', 'TRANSFERENCIA', 'TAXA', 'RENDIMENTO') NOT NULL,
    valor DECIMAL(15,2) NOT NULL,
    data_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    descricao VARCHAR(100),
    FOREIGN KEY (id_conta_origem) REFERENCES conta(id_conta),
    FOREIGN KEY (id_conta_destino) REFERENCES conta(id_conta)
);

-- Índice de data_hora
CREATE INDEX idx_data_hora ON transacao(data_hora);

-- Tabela auditoria
CREATE TABLE auditoria (
    id_auditoria INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT,
    acao VARCHAR(50) NOT NULL,
    data_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    detalhes TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Tabela relatorio
CREATE TABLE relatorio (
    id_relatorio INT AUTO_INCREMENT PRIMARY KEY,
    id_funcionario INT NOT NULL,
    tipo_relatorio VARCHAR(50) NOT NULL,
    data_geracao TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    conteudo TEXT NOT NULL,
    FOREIGN KEY (id_funcionario) REFERENCES funcionario(id_funcionario)
);


-- Gatilhos

-- Atualização de Saldo
DELIMITER $$
CREATE TRIGGER atualizar_saldo AFTER INSERT ON transacao
FOR EACH ROW
BEGIN
IF NEW.tipo_transacao = 'DEPOSITO' THEN
UPDATE conta SET saldo = saldo + NEW.valor WHERE id_conta = NEW.id_conta_origem;
ELSEIF NEW.tipo_transacao IN ('SAQUE', 'TAXA') THEN
UPDATE conta SET saldo = saldo - NEW.valor WHERE id_conta = NEW.id_conta_origem;
ELSEIF NEW.tipo_transacao = 'TRANSFERENCIA' THEN
UPDATE conta SET saldo = saldo - NEW.valor WHERE id_conta = NEW.id_conta_origem;
UPDATE conta SET saldo = saldo + NEW.valor WHERE id_conta = NEW.id_conta_destino;
END IF;
END $$
DELIMITER ;

-- Validação de Senha Forte
DELIMITER $$
CREATE TRIGGER validar_senha BEFORE UPDATE ON usuario
FOR EACH ROW
BEGIN
IF NEW.senha_hash REGEXP '^[0-9a-f]{32}$' THEN -- Assume MD5
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Senha deve ser atualizada via procedure com validação';
END IF;
END $$
DELIMITER ;

-- Limite de Depósito Diário
DELIMITER $$
CREATE TRIGGER limite_deposito BEFORE INSERT ON transacao
FOR EACH ROW
BEGIN
DECLARE total_dia DECIMAL(15,2);
SELECT SUM(valor) INTO total_dia
FROM transacao
WHERE id_conta_origem = NEW.id_conta_origem
AND tipo_transacao = 'DEPOSITO'
AND DATE(data_hora) = DATE(NEW.data_hora);
IF (total_dia + NEW.valor) > 10000 THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Limite diário de depósito excedido';
END IF;
END $$
DELIMITER ;

-- Procedimentos Armazenados

-- Gerar OTP
DELIMITER $$
CREATE PROCEDURE gerar_otp(IN id_usuario INT)
BEGIN
DECLARE novo_otp VARCHAR(6);
SET novo_otp = LPAD(FLOOR(RAND() * 1000000), 6, '0');
UPDATE usuario SET otp_ativo = novo_otp, otp_expiracao = NOW() + INTERVAL 5 MINUTE
WHERE id_usuario = id_usuario;
SELECT novo_otp;
END $$
DELIMITER ;

-- Calcular Score de Crédito
DELIMITER $$
CREATE PROCEDURE calcular_score_credito(IN id_cliente INT)
BEGIN
DECLARE total_trans DECIMAL(15,2);
DECLARE media_trans DECIMAL(15,2);
SELECT SUM(valor), AVG(valor) INTO total_trans, media_trans
FROM transacao t
JOIN conta c ON t.id_conta_origem = c.id_conta
WHERE c.id_cliente = id_cliente AND t.tipo_transacao IN ('DEPOSITO', 'SAQUE');
UPDATE cliente SET score_credito = LEAST(100, (total_trans / 1000) + (media_trans / 100))
WHERE id_cliente = id_cliente;
END $$
DELIMITER ;

-- Visões

-- Resumo de Contas por Cliente
CREATE VIEW vw_resumo_contas AS
SELECT c.id_cliente, u.nome, COUNT(co.id_conta) AS total_contas, SUM(co.saldo) AS saldo_total
FROM cliente c
JOIN usuario u ON c.id_usuario = u.id_usuario
JOIN conta co ON c.id_cliente = co.id_cliente
GROUP BY c.id_cliente, u.nome;

-- Movimentações Recentes
CREATE VIEW vw_movimentacoes_recentes AS
SELECT t.*, c.numero_conta, u.nome AS cliente
FROM transacao t
JOIN conta c ON t.id_conta_origem = c.id_conta
JOIN cliente cl ON c.id_cliente = cl.id_cliente
JOIN usuario u ON cl.id_usuario = u.id_usuario
WHERE t.data_hora >= NOW() - INTERVAL 90 DAY;

SELECT * FROM vw_resumo_contas;
SELECT * FROM vw_movimentacoes_recentes;


-- Consultas

SELECT * FROM usuario;
SELECT * FROM funcionario;
SELECT * FROM cliente;
SELECT * FROM endereco;
SELECT * FROM agencia;
SELECT * FROM conta;
SELECT * FROM conta_corrente;
SELECT * FROM conta_investimento;
SELECT * FROM conta_poupanca;
SELECT * FROM transacao;
SELECT * FROM auditoria;
SELECT * FROM relatorio;


-- Consulta de Dados
-- Submenu

-- Visao detalhes da conta
CREATE VIEW vw_detalhes_conta AS
SELECT
    c.id_conta,
    c.numero_conta,
    a.nome AS nome_agencia,
    a.codigo_agencia,
    c.tipo_conta,
    u.nome AS nome_cliente,
    u.cpf AS cpf_cliente,
    c.saldo AS saldo_atual,
    c.status AS status_conta,
    c.data_abertura,

    cc.limite AS limite_disponivel_cc,
    cc.data_vencimento AS data_vencimento_cc,
    cc.taxa_manutencao AS taxa_manutencao_cc,
    -- Campos específicos de Conta Poupança
    cp.taxa_rendimento AS taxa_rendimento_cp,
    -- Campos específicos de Conta Investimento
    ci.perfil_risco AS perfil_risco_ci,
    ci.valor_minimo AS valor_minimo_ci,
    ci.taxa_rendimento_base AS taxa_rendimento_base_ci
FROM
    conta c
JOIN
    cliente cl ON c.id_cliente = cl.id_cliente
JOIN
    usuario u ON cl.id_usuario = u.id_usuario
JOIN
    agencia a ON c.id_agencia = a.id_agencia
LEFT JOIN
    conta_corrente cc ON c.id_conta = cc.id_conta AND c.tipo_conta = 'CORRENTE'
LEFT JOIN
    conta_poupanca cp ON c.id_conta = cp.id_conta AND c.tipo_conta = 'POUPANCA'
LEFT JOIN
    conta_investimento ci ON c.id_conta = ci.id_conta AND c.tipo_conta = 'INVESTIMENTO';

-- Visao detalhes funcionario
CREATE VIEW vw_detalhes_funcionario AS
SELECT
    f.id_funcionario,
    f.codigo_funcionario,
    u.nome AS nome_funcionario,
    u.cpf AS cpf_funcionario,
    f.cargo,
    u.data_nascimento,
    u.telefone,
    CONCAT(e.local, ', Nº ', e.numero_casa, ', Bairro: ', e.bairro, '. ', e.cidade, '-', e.estado, '. CEP: ', e.cep,
           COALESCE(CONCAT(' (Complemento: ', e.complemento, ')'),'')) AS endereco_completo,
    sup_u.nome AS nome_supervisor,
    sup_f.codigo_funcionario AS codigo_supervisor
FROM
    funcionario f
JOIN
    usuario u ON f.id_usuario = u.id_usuario
LEFT JOIN
    endereco e ON u.id_usuario = e.id_usuario
LEFT JOIN
    funcionario sup_f ON f.id_supervisor = sup_f.id_funcionario
LEFT JOIN
    usuario sup_u ON sup_f.id_usuario = sup_u.id_usuario;

-- Visao detalhes cliente
CREATE VIEW vw_detalhes_cliente AS
SELECT
    cl.id_cliente,
    u.nome AS nome_cliente,
    u.cpf AS cpf_cliente,
    u.data_nascimento,
    u.telefone,
    CONCAT(e.local, ', Nº ', e.numero_casa, ', Bairro: ', e.bairro, '. ', e.cidade, '-', e.estado, '. CEP: ', e.cep,
           COALESCE(CONCAT(' (Complemento: ', e.complemento, ')'),'')) AS endereco_completo,
    cl.score_credito,
    (SELECT COUNT(*) FROM conta c WHERE c.id_cliente = cl.id_cliente AND c.status = 'ATIVA') AS num_contas_ativas,
    (SELECT COUNT(*) FROM conta c WHERE c.id_cliente = cl.id_cliente AND c.status != 'ATIVA') AS num_contas_nao_ativas -- Inclui ENCERRADA, BLOQUEADA
FROM
    cliente cl
JOIN
    usuario u ON cl.id_usuario = u.id_usuario
LEFT JOIN
    endereco e ON u.id_usuario = e.id_usuario;

CREATE VIEW vw_extrato_conta_recente AS
SELECT
    t.id_transacao,
    t.id_conta_origem AS id_conta_referencia,
    c_orig.numero_conta AS numero_conta_referencia,
    t.data_hora,
    t.tipo_transacao,
    CASE
        WHEN t.tipo_transacao IN ('SAQUE', 'TAXA', 'PAGAMENTO') THEN 'SAIDA'
        WHEN t.tipo_transacao = 'TRANSFERENCIA' THEN 'SAIDA_TRANSFERENCIA'
        WHEN t.tipo_transacao = 'DEPOSITO' THEN 'ENTRADA_DEPOSITO' -- Trigger usa id_conta_origem para depósito
        WHEN t.tipo_transacao = 'RENDIMENTO' THEN 'ENTRADA_RENDIMENTO' -- Trigger usa id_conta_origem para rendimento
        ELSE 'MOV_ORIGEM'
    END AS tipo_movimento,
    t.valor,
    t.descricao,
    c_dest.numero_conta AS numero_conta_outra_parte, 
    u_dest.nome AS nome_cliente_outra_parte
FROM
    transacao t
JOIN
    conta c_orig ON t.id_conta_origem = c_orig.id_conta
LEFT JOIN
    conta c_dest ON t.id_conta_destino = c_dest.id_conta AND t.tipo_transacao = 'TRANSFERENCIA'
LEFT JOIN
    cliente cl_dest ON c_dest.id_cliente = cl_dest.id_cliente
LEFT JOIN
    usuario u_dest ON cl_dest.id_usuario = u_dest.id_usuario
WHERE
    t.id_conta_origem IS NOT NULL AND t.data_hora >= NOW() - INTERVAL 90 DAY

UNION ALL

SELECT
    t.id_transacao,
    t.id_conta_destino AS id_conta_referencia,
    c_dest.numero_conta AS numero_conta_referencia,
    t.data_hora,
    t.tipo_transacao,
    'ENTRADA_TRANSFERENCIA' AS tipo_movimento,
    t.valor,
    t.descricao,
    c_orig.numero_conta AS numero_conta_outra_parte, -- Origem da transferência
    u_orig.nome AS nome_cliente_outra_parte
FROM
    transacao t
JOIN
    conta c_dest ON t.id_conta_destino = c_dest.id_conta
JOIN -- Origem é obrigatória para transferência
    conta c_orig ON t.id_conta_origem = c_orig.id_conta
LEFT JOIN
    cliente cl_orig ON c_orig.id_cliente = cl_orig.id_cliente
LEFT JOIN
    usuario u_orig ON cl_orig.id_usuario = u_orig.id_usuario
WHERE
    t.id_conta_destino IS NOT NULL
    AND t.tipo_transacao = 'TRANSFERENCIA' -- Apenas transferências para destino
    AND t.id_conta_origem != t.id_conta_destino -- Evita duplicar auto-transferência se já pega na primeira parte
    AND t.data_hora >= NOW() - INTERVAL 90 DAY;


SELECT * FROM vw_resumo_contas LIMIT 5;
SELECT * FROM vw_movimentacoes_recentes LIMIT 5;
SELECT * FROM vw_detalhes_conta LIMIT 5;
SELECT * FROM vw_detalhes_funcionario LIMIT 5;
SELECT * FROM vw_detalhes_cliente LIMIT 5;

